2023-08-08 10:18:47:911 grammar LogManager.java:25 before: (COMBINED_GRAMMAR IsiLang (@ header {
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE prog (BLOCK (ALT 'programa' decl bloco 'fimprog;' {
					program.setVarTable(symbolTable);
					program.setComandos(stack.pop());
					verificaUso();
				}))) (RULE decl (BLOCK (ALT (* (BLOCK (ALT declaravar)))))) (RULE declaravar (BLOCK (ALT tipo ID {
					_varName = _input.LT(-1).getText();	
					_varValue = null;
					symbol = new IsiVariable(_varName, _tipo, _varValue);
					if (!symbolTable.exists(_varName))
					{
						symbolTable.add(symbol);
					}
					else
					{
						throw new IsiSemanticException("Symbol "+_varName+" already declared");
					}
				} (* (BLOCK (ALT VIR ID {
						_varName = _input.LT(-1).getText();	
						_varValue = null;
						symbol = new IsiVariable(_varName, _tipo, _varValue);
						if (!symbolTable.exists(_varName))
						{
							symbolTable.add(symbol);
						}
						else
						{
							throw new IsiSemanticException("Symbol "+_varName+" already declared");
						}
					}))) SC))) (RULE tipo (BLOCK (ALT 'numero' {_tipo = IsiVariable.NUMBER; }) (ALT 'texto' {_tipo = IsiVariable.TEXT; }) (ALT 'inteiro' {_tipo = IsiVariable.WHOLE; }))) (RULE bloco (BLOCK (ALT {
					_declareFlag = 0;
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
			  	} (+ (BLOCK (ALT cmd)))))) (RULE cmd (BLOCK (ALT cmdleitura) (ALT cmdescrita) (ALT cmdattr) (ALT cmdselecao) (ALT cmdloop))) (RULE cmdleitura (BLOCK (ALT 'leia' AP ID {
					verificaID(_input.LT(-1).getText());
					_readID = _input.LT(-1).getText();
				} FP SC {
					IsiVariable var = (IsiVariable)symbolTable.get(_readID);
					CommandLeitura cmd = new CommandLeitura(_readID, var);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				}))) (RULE cmdescrita (BLOCK (ALT 'escreva' AP ID {
					verificaID(_input.LT(-1).getText()); 
					_writeID = _input.LT(-1).getText();
				} FP SC {
					verificaInit(_writeID);
					IsiVariable var = (IsiVariable)symbolTable.get(_writeID);
					if (var.getValue() == "READY") var.setValue("SET");
					CommandEscrita cmd = new CommandEscrita(_writeID);
					stack.peek().add(cmd);
				}))) (RULE cmdattr (BLOCK (ALT ID {
					verificaID(_input.LT(-1).getText()); 
					_exprID = _input.LT(-1).getText();
				} ATTR { _exprContent = ""; } expr SC {
					IsiVariable var = (IsiVariable)symbolTable.get(_exprID);
					CommandAttr cmd = new CommandAttr(_exprID, _exprContent);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				}))) (RULE cmdselecao (BLOCK (ALT 'se' AP ID {
					verificaID(_input.LT(-1).getText()); 
					_exprDecision = _input.LT(-1).getText();
					verificaInit(_exprDecision);
					IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
					if (var.getValue() == "READY") var.setValue("SET");
				} OPREL { _exprDecision += _input.LT(-1).getText(); } (BLOCK (ALT ID) (ALT NUMBER)) { _exprDecision += _input.LT(-1).getText(); } FP ACH {
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
				} (+ (BLOCK (ALT cmd))) FCH {
					listaTrue = stack.pop();
				} (? (BLOCK (ALT 'senao' ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH {
						listaFalse = stack.pop();
					}))) {
					CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
					stack.peek().add(cmd);
				}))) (RULE cmdloop (BLOCK (ALT (BLOCK (ALT { _tipoLoop = CommandLoop.WHILE; } 'enquanto' AP ID {
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					} OPREL { _exprDecision += _input.LT(-1).getText(); } (BLOCK (ALT ID) (ALT NUMBER)) { _exprDecision += _input.LT(-1).getText(); } FP ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH) (ALT { _tipoLoop = CommandLoop.DOWHILE; } 'faca' ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH 'enquanto' AP ID {
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					} OPREL { _exprDecision += _input.LT(-1).getText(); } (BLOCK (ALT ID) (ALT NUMBER)) { _exprDecision += _input.LT(-1).getText(); } FP SC)) {
					listaLoop = stack.pop();
					CommandLoop cmd = new CommandLoop(_tipoLoop, _exprDecision, listaLoop);
					stack.peek().add(cmd);
				}))) (RULE expr (BLOCK (ALT termo (* (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText(); } termo)))) (ALT AP { _exprContent += "("; } expr FP { _exprContent += ")"; } (? (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText(); } expr)))))) (RULE termo (BLOCK (ALT ID {
					verificaID(_input.LT(-1).getText());
					_exprContent += _input.LT(-1).getText();
					verificaInit(_input.LT(-1).getText());
					IsiVariable var = (IsiVariable)symbolTable.get(_input.LT(-1).getText());
					if (var.getValue() == "READY") var.setValue("SET");
				}) (ALT NUMBER { _exprContent += _input.LT(-1).getText(); }))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE ATTR (BLOCK (ALT '='))) (RULE OP (BLOCK (ALT '+') (ALT '-') (ALT '*') (ALT '/'))) (RULE VIR (BLOCK (ALT ','))) (RULE ACH (BLOCK (ALT '{'))) (RULE FCH (BLOCK (ALT '}'))) (RULE OPREL (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z]) (ALT [A-Z]) (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r'))) skip)))))
2023-08-08 10:18:47:941 grammar LogManager.java:25 after: (COMBINED_GRAMMAR IsiLang (@ header {
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE prog (BLOCK (ALT 'programa' decl bloco 'fimprog;' {
					program.setVarTable(symbolTable);
					program.setComandos(stack.pop());
					verificaUso();
				}))) (RULE decl (BLOCK (ALT (* (BLOCK (ALT declaravar)))))) (RULE declaravar (BLOCK (ALT tipo ID {
					_varName = _input.LT(-1).getText();	
					_varValue = null;
					symbol = new IsiVariable(_varName, _tipo, _varValue);
					if (!symbolTable.exists(_varName))
					{
						symbolTable.add(symbol);
					}
					else
					{
						throw new IsiSemanticException("Symbol "+_varName+" already declared");
					}
				} (* (BLOCK (ALT VIR ID {
						_varName = _input.LT(-1).getText();	
						_varValue = null;
						symbol = new IsiVariable(_varName, _tipo, _varValue);
						if (!symbolTable.exists(_varName))
						{
							symbolTable.add(symbol);
						}
						else
						{
							throw new IsiSemanticException("Symbol "+_varName+" already declared");
						}
					}))) SC))) (RULE tipo (BLOCK (ALT 'numero' {_tipo = IsiVariable.NUMBER; }) (ALT 'texto' {_tipo = IsiVariable.TEXT; }) (ALT 'inteiro' {_tipo = IsiVariable.WHOLE; }))) (RULE bloco (BLOCK (ALT {
					_declareFlag = 0;
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
			  	} (+ (BLOCK (ALT cmd)))))) (RULE cmd (BLOCK (ALT cmdleitura) (ALT cmdescrita) (ALT cmdattr) (ALT cmdselecao) (ALT cmdloop))) (RULE cmdleitura (BLOCK (ALT 'leia' AP ID {
					verificaID(_input.LT(-1).getText());
					_readID = _input.LT(-1).getText();
				} FP SC {
					IsiVariable var = (IsiVariable)symbolTable.get(_readID);
					CommandLeitura cmd = new CommandLeitura(_readID, var);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				}))) (RULE cmdescrita (BLOCK (ALT 'escreva' AP ID {
					verificaID(_input.LT(-1).getText()); 
					_writeID = _input.LT(-1).getText();
				} FP SC {
					verificaInit(_writeID);
					IsiVariable var = (IsiVariable)symbolTable.get(_writeID);
					if (var.getValue() == "READY") var.setValue("SET");
					CommandEscrita cmd = new CommandEscrita(_writeID);
					stack.peek().add(cmd);
				}))) (RULE cmdattr (BLOCK (ALT ID {
					verificaID(_input.LT(-1).getText()); 
					_exprID = _input.LT(-1).getText();
				} ATTR { _exprContent = ""; } expr SC {
					IsiVariable var = (IsiVariable)symbolTable.get(_exprID);
					CommandAttr cmd = new CommandAttr(_exprID, _exprContent);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				}))) (RULE cmdselecao (BLOCK (ALT 'se' AP ID {
					verificaID(_input.LT(-1).getText()); 
					_exprDecision = _input.LT(-1).getText();
					verificaInit(_exprDecision);
					IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
					if (var.getValue() == "READY") var.setValue("SET");
				} OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) { _exprDecision += _input.LT(-1).getText(); } FP ACH {
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
				} (+ (BLOCK (ALT cmd))) FCH {
					listaTrue = stack.pop();
				} (? (BLOCK (ALT 'senao' ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH {
						listaFalse = stack.pop();
					}))) {
					CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
					stack.peek().add(cmd);
				}))) (RULE cmdloop (BLOCK (ALT (BLOCK (ALT { _tipoLoop = CommandLoop.WHILE; } 'enquanto' AP ID {
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					} OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) { _exprDecision += _input.LT(-1).getText(); } FP ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH) (ALT { _tipoLoop = CommandLoop.DOWHILE; } 'faca' ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH 'enquanto' AP ID {
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					} OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) { _exprDecision += _input.LT(-1).getText(); } FP SC)) {
					listaLoop = stack.pop();
					CommandLoop cmd = new CommandLoop(_tipoLoop, _exprDecision, listaLoop);
					stack.peek().add(cmd);
				}))) (RULE expr (BLOCK (ALT termo (* (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText(); } termo)))) (ALT AP { _exprContent += "("; } expr FP { _exprContent += ")"; } (? (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText(); } expr)))))) (RULE termo (BLOCK (ALT ID {
					verificaID(_input.LT(-1).getText());
					_exprContent += _input.LT(-1).getText();
					verificaInit(_input.LT(-1).getText());
					IsiVariable var = (IsiVariable)symbolTable.get(_input.LT(-1).getText());
					if (var.getValue() == "READY") var.setValue("SET");
				}) (ALT NUMBER { _exprContent += _input.LT(-1).getText(); }))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE ATTR (BLOCK (ALT '='))) (RULE OP (BLOCK (ALT (SET '+' '-' '*' '/')))) (RULE VIR (BLOCK (ALT ','))) (RULE ACH (BLOCK (ALT '{'))) (RULE FCH (BLOCK (ALT '}'))) (RULE OPREL (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z]) (ALT [A-Z]) (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (SET ' ' '\t' '\n' '\r')) skip)))))
2023-08-08 10:18:47:978 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR IsiLang (@ header {
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE prog (BLOCK (ALT 'programa' decl bloco 'fimprog;' {
					program.setVarTable(symbolTable);
					program.setComandos(stack.pop());
					verificaUso();
				}))) (RULE decl (BLOCK (ALT (* (BLOCK (ALT declaravar)))))) (RULE declaravar (BLOCK (ALT tipo ID {
					_varName = _input.LT(-1).getText();	
					_varValue = null;
					symbol = new IsiVariable(_varName, _tipo, _varValue);
					if (!symbolTable.exists(_varName))
					{
						symbolTable.add(symbol);
					}
					else
					{
						throw new IsiSemanticException("Symbol "+_varName+" already declared");
					}
				} (* (BLOCK (ALT VIR ID {
						_varName = _input.LT(-1).getText();	
						_varValue = null;
						symbol = new IsiVariable(_varName, _tipo, _varValue);
						if (!symbolTable.exists(_varName))
						{
							symbolTable.add(symbol);
						}
						else
						{
							throw new IsiSemanticException("Symbol "+_varName+" already declared");
						}
					}))) SC))) (RULE tipo (BLOCK (ALT 'numero' {_tipo = IsiVariable.NUMBER; }) (ALT 'texto' {_tipo = IsiVariable.TEXT; }) (ALT 'inteiro' {_tipo = IsiVariable.WHOLE; }))) (RULE bloco (BLOCK (ALT {
					_declareFlag = 0;
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
			  	} (+ (BLOCK (ALT cmd)))))) (RULE cmd (BLOCK (ALT cmdleitura) (ALT cmdescrita) (ALT cmdattr) (ALT cmdselecao) (ALT cmdloop))) (RULE cmdleitura (BLOCK (ALT 'leia' AP ID {
					verificaID(_input.LT(-1).getText());
					_readID = _input.LT(-1).getText();
				} FP SC {
					IsiVariable var = (IsiVariable)symbolTable.get(_readID);
					CommandLeitura cmd = new CommandLeitura(_readID, var);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				}))) (RULE cmdescrita (BLOCK (ALT 'escreva' AP ID {
					verificaID(_input.LT(-1).getText()); 
					_writeID = _input.LT(-1).getText();
				} FP SC {
					verificaInit(_writeID);
					IsiVariable var = (IsiVariable)symbolTable.get(_writeID);
					if (var.getValue() == "READY") var.setValue("SET");
					CommandEscrita cmd = new CommandEscrita(_writeID);
					stack.peek().add(cmd);
				}))) (RULE cmdattr (BLOCK (ALT ID {
					verificaID(_input.LT(-1).getText()); 
					_exprID = _input.LT(-1).getText();
				} ATTR { _exprContent = ""; } expr SC {
					IsiVariable var = (IsiVariable)symbolTable.get(_exprID);
					CommandAttr cmd = new CommandAttr(_exprID, _exprContent);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				}))) (RULE cmdselecao (BLOCK (ALT 'se' AP ID {
					verificaID(_input.LT(-1).getText()); 
					_exprDecision = _input.LT(-1).getText();
					verificaInit(_exprDecision);
					IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
					if (var.getValue() == "READY") var.setValue("SET");
				} OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) { _exprDecision += _input.LT(-1).getText(); } FP ACH {
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
				} (+ (BLOCK (ALT cmd))) FCH {
					listaTrue = stack.pop();
				} (? (BLOCK (ALT 'senao' ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH {
						listaFalse = stack.pop();
					}))) {
					CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
					stack.peek().add(cmd);
				}))) (RULE cmdloop (BLOCK (ALT (BLOCK (ALT { _tipoLoop = CommandLoop.WHILE; } 'enquanto' AP ID {
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					} OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) { _exprDecision += _input.LT(-1).getText(); } FP ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH) (ALT { _tipoLoop = CommandLoop.DOWHILE; } 'faca' ACH {
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					} (+ (BLOCK (ALT cmd))) FCH 'enquanto' AP ID {
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					} OPREL { _exprDecision += _input.LT(-1).getText(); } (SET ID NUMBER) { _exprDecision += _input.LT(-1).getText(); } FP SC)) {
					listaLoop = stack.pop();
					CommandLoop cmd = new CommandLoop(_tipoLoop, _exprDecision, listaLoop);
					stack.peek().add(cmd);
				}))) (RULE expr (BLOCK (ALT termo (* (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText(); } termo)))) (ALT AP { _exprContent += "("; } expr FP { _exprContent += ")"; } (? (BLOCK (ALT OP { _exprContent += _input.LT(-1).getText(); } expr)))))) (RULE termo (BLOCK (ALT ID {
					verificaID(_input.LT(-1).getText());
					_exprContent += _input.LT(-1).getText();
					verificaInit(_input.LT(-1).getText());
					IsiVariable var = (IsiVariable)symbolTable.get(_input.LT(-1).getText());
					if (var.getValue() == "READY") var.setValue("SET");
				}) (ALT NUMBER { _exprContent += _input.LT(-1).getText(); })))))
2023-08-08 10:18:47:978 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR IsiLangLexer (@ header {
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;
}) (@ members {
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}
}) (RULES (RULE T__0 (BLOCK (ALT 'programa'))) (RULE T__1 (BLOCK (ALT 'fimprog;'))) (RULE T__2 (BLOCK (ALT 'numero'))) (RULE T__3 (BLOCK (ALT 'texto'))) (RULE T__4 (BLOCK (ALT 'inteiro'))) (RULE T__5 (BLOCK (ALT 'leia'))) (RULE T__6 (BLOCK (ALT 'escreva'))) (RULE T__7 (BLOCK (ALT 'se'))) (RULE T__8 (BLOCK (ALT 'senao'))) (RULE T__9 (BLOCK (ALT 'enquanto'))) (RULE T__10 (BLOCK (ALT 'faca'))) (RULE AP (BLOCK (ALT '('))) (RULE FP (BLOCK (ALT ')'))) (RULE SC (BLOCK (ALT ';'))) (RULE ATTR (BLOCK (ALT '='))) (RULE OP (BLOCK (ALT (SET '+' '-' '*' '/')))) (RULE VIR (BLOCK (ALT ','))) (RULE ACH (BLOCK (ALT '{'))) (RULE FCH (BLOCK (ALT '}'))) (RULE OPREL (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-z]) (ALT [A-Z]) (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (SET ' ' '\t' '\n' '\r')) skip)))))
2023-08-08 10:18:48:187 action-translator LogManager.java:25 translate 
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2023-08-08 10:18:48:188 action-translator LogManager.java:25 translate 
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;

2023-08-08 10:18:48:264 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, AP=12, FP=13, SC=14, ATTR=15, OP=16, VIR=17, ACH=18, FCH=19, OPREL=20, ID=21, NUMBER=22, WS=23}
2023-08-08 10:18:48:264 semantics LogManager.java:25 strings={'programa'=1, 'fimprog;'=2, 'numero'=3, 'texto'=4, 'inteiro'=5, 'leia'=6, 'escreva'=7, 'se'=8, 'senao'=9, 'enquanto'=10, 'faca'=11, '('=12, ')'=13, ';'=14, '='=15, ','=17, '{'=18, '}'=19}
2023-08-08 10:18:48:282 LL1 LogManager.java:25 
DECISION 0 in rule decl
2023-08-08 10:18:48:282 LL1 LogManager.java:25 look=[{3..5}, {6..8, 10..11, 21}]
2023-08-08 10:18:48:282 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:282 LL1 LogManager.java:25 
DECISION 1 in rule declaravar
2023-08-08 10:18:48:282 LL1 LogManager.java:25 look=[17, 14]
2023-08-08 10:18:48:282 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:282 LL1 LogManager.java:25 
DECISION 2 in rule tipo
2023-08-08 10:18:48:282 LL1 LogManager.java:25 look=[3, 4, 5]
2023-08-08 10:18:48:283 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:283 LL1 LogManager.java:25 
DECISION 3 in rule bloco
2023-08-08 10:18:48:283 LL1 LogManager.java:25 look=[{6..8, 10..11, 21}, 2]
2023-08-08 10:18:48:283 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:283 LL1 LogManager.java:25 
DECISION 4 in rule cmd
2023-08-08 10:18:48:283 LL1 LogManager.java:25 look=[6, 7, 21, 8, {10..11}]
2023-08-08 10:18:48:283 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:283 LL1 LogManager.java:25 
DECISION 5 in rule cmdselecao
2023-08-08 10:18:48:283 LL1 LogManager.java:25 look=[{6..8, 10..11, 21}, 19]
2023-08-08 10:18:48:283 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:283 LL1 LogManager.java:25 
DECISION 6 in rule cmdselecao
2023-08-08 10:18:48:283 LL1 LogManager.java:25 look=[{6..8, 10..11, 21}, 19]
2023-08-08 10:18:48:283 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:283 LL1 LogManager.java:25 
DECISION 7 in rule cmdselecao
2023-08-08 10:18:48:283 LL1 LogManager.java:25 look=[9, {2, 6..8, 10..11, 19, 21}]
2023-08-08 10:18:48:283 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:283 LL1 LogManager.java:25 
DECISION 8 in rule cmdloop
2023-08-08 10:18:48:284 LL1 LogManager.java:25 look=[{6..8, 10..11, 21}, 19]
2023-08-08 10:18:48:284 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:284 LL1 LogManager.java:25 
DECISION 9 in rule cmdloop
2023-08-08 10:18:48:284 LL1 LogManager.java:25 look=[{6..8, 10..11, 21}, 19]
2023-08-08 10:18:48:284 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:284 LL1 LogManager.java:25 
DECISION 10 in rule cmdloop
2023-08-08 10:18:48:284 LL1 LogManager.java:25 look=[10, 11]
2023-08-08 10:18:48:284 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:284 LL1 LogManager.java:25 
DECISION 11 in rule expr
2023-08-08 10:18:48:284 LL1 LogManager.java:25 look=[16, {13..14}]
2023-08-08 10:18:48:284 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:284 LL1 LogManager.java:25 
DECISION 12 in rule expr
2023-08-08 10:18:48:284 LL1 LogManager.java:25 look=[16, {13..14}]
2023-08-08 10:18:48:284 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:284 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-08-08 10:18:48:284 LL1 LogManager.java:25 look=[{21..22}, 12]
2023-08-08 10:18:48:284 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:284 LL1 LogManager.java:25 
DECISION 14 in rule termo
2023-08-08 10:18:48:284 LL1 LogManager.java:25 look=[21, 22]
2023-08-08 10:18:48:284 LL1 LogManager.java:25 LL(1)? true
2023-08-08 10:18:48:287 action-translator LogManager.java:25 translate 
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2023-08-08 10:18:48:287 action-translator LogManager.java:25 translate 
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;

2023-08-08 10:18:48:301 action-translator LogManager.java:25 translate 
					program.setVarTable(symbolTable);
					program.setComandos(stack.pop());
					verificaUso();
				
2023-08-08 10:18:48:313 action-translator LogManager.java:25 translate 
					_varName = _input.LT(-1).getText();	
					_varValue = null;
					symbol = new IsiVariable(_varName, _tipo, _varValue);
					if (!symbolTable.exists(_varName))
					{
						symbolTable.add(symbol);
					}
					else
					{
						throw new IsiSemanticException("Symbol "+_varName+" already declared");
					}
				
2023-08-08 10:18:48:313 action-translator LogManager.java:25 translate 
						_varName = _input.LT(-1).getText();	
						_varValue = null;
						symbol = new IsiVariable(_varName, _tipo, _varValue);
						if (!symbolTable.exists(_varName))
						{
							symbolTable.add(symbol);
						}
						else
						{
							throw new IsiSemanticException("Symbol "+_varName+" already declared");
						}
					
2023-08-08 10:18:48:314 action-translator LogManager.java:25 translate _tipo = IsiVariable.NUMBER; 
2023-08-08 10:18:48:314 action-translator LogManager.java:25 translate _tipo = IsiVariable.TEXT; 
2023-08-08 10:18:48:315 action-translator LogManager.java:25 translate _tipo = IsiVariable.WHOLE; 
2023-08-08 10:18:48:316 action-translator LogManager.java:25 translate 
					_declareFlag = 0;
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
			  	
2023-08-08 10:18:48:318 action-translator LogManager.java:25 translate 
					verificaID(_input.LT(-1).getText());
					_readID = _input.LT(-1).getText();
				
2023-08-08 10:18:48:318 action-translator LogManager.java:25 translate 
					IsiVariable var = (IsiVariable)symbolTable.get(_readID);
					CommandLeitura cmd = new CommandLeitura(_readID, var);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				
2023-08-08 10:18:48:318 action-translator LogManager.java:25 translate 
					verificaID(_input.LT(-1).getText()); 
					_writeID = _input.LT(-1).getText();
				
2023-08-08 10:18:48:318 action-translator LogManager.java:25 translate 
					verificaInit(_writeID);
					IsiVariable var = (IsiVariable)symbolTable.get(_writeID);
					if (var.getValue() == "READY") var.setValue("SET");
					CommandEscrita cmd = new CommandEscrita(_writeID);
					stack.peek().add(cmd);
				
2023-08-08 10:18:48:319 action-translator LogManager.java:25 translate 
					verificaID(_input.LT(-1).getText()); 
					_exprID = _input.LT(-1).getText();
				
2023-08-08 10:18:48:319 action-translator LogManager.java:25 translate  _exprContent = ""; 
2023-08-08 10:18:48:320 action-translator LogManager.java:25 translate 
					IsiVariable var = (IsiVariable)symbolTable.get(_exprID);
					CommandAttr cmd = new CommandAttr(_exprID, _exprContent);
					if (var.getValue() == null) var.setValue("READY");
					stack.peek().add(cmd);
				
2023-08-08 10:18:48:321 action-translator LogManager.java:25 translate 
					verificaID(_input.LT(-1).getText()); 
					_exprDecision = _input.LT(-1).getText();
					verificaInit(_exprDecision);
					IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
					if (var.getValue() == "READY") var.setValue("SET");
				
2023-08-08 10:18:48:321 action-translator LogManager.java:25 translate  _exprDecision += _input.LT(-1).getText(); 
2023-08-08 10:18:48:321 action-translator LogManager.java:25 translate  _exprDecision += _input.LT(-1).getText(); 
2023-08-08 10:18:48:321 action-translator LogManager.java:25 translate 
					curThread = new ArrayList<AbstractCommand>();
					stack.push(curThread);
				
2023-08-08 10:18:48:321 action-translator LogManager.java:25 translate 
					listaTrue = stack.pop();
				
2023-08-08 10:18:48:322 action-translator LogManager.java:25 translate 
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					
2023-08-08 10:18:48:322 action-translator LogManager.java:25 translate 
						listaFalse = stack.pop();
					
2023-08-08 10:18:48:323 action-translator LogManager.java:25 translate 
					CommandDecisao cmd = new CommandDecisao(_exprDecision, listaTrue, listaFalse);
					stack.peek().add(cmd);
				
2023-08-08 10:18:48:324 action-translator LogManager.java:25 translate  _tipoLoop = CommandLoop.WHILE; 
2023-08-08 10:18:48:325 action-translator LogManager.java:25 translate 
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					
2023-08-08 10:18:48:325 action-translator LogManager.java:25 translate  _exprDecision += _input.LT(-1).getText(); 
2023-08-08 10:18:48:325 action-translator LogManager.java:25 translate  _exprDecision += _input.LT(-1).getText(); 
2023-08-08 10:18:48:325 action-translator LogManager.java:25 translate 
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					
2023-08-08 10:18:48:326 action-translator LogManager.java:25 translate  _tipoLoop = CommandLoop.DOWHILE; 
2023-08-08 10:18:48:326 action-translator LogManager.java:25 translate 
						curThread = new ArrayList<AbstractCommand>();
						stack.push(curThread);
					
2023-08-08 10:18:48:326 action-translator LogManager.java:25 translate 
						verificaID(_input.LT(-1).getText()); 
						_exprDecision = _input.LT(-1).getText();
						verificaInit(_exprDecision);
						IsiVariable var = (IsiVariable)symbolTable.get(_exprDecision);
						if (var.getValue() == "READY") var.setValue("SET");
					
2023-08-08 10:18:48:327 action-translator LogManager.java:25 translate  _exprDecision += _input.LT(-1).getText(); 
2023-08-08 10:18:48:327 action-translator LogManager.java:25 translate  _exprDecision += _input.LT(-1).getText(); 
2023-08-08 10:18:48:327 action-translator LogManager.java:25 translate 
					listaLoop = stack.pop();
					CommandLoop cmd = new CommandLoop(_tipoLoop, _exprDecision, listaLoop);
					stack.peek().add(cmd);
				
2023-08-08 10:18:48:328 action-translator LogManager.java:25 translate  _exprContent += _input.LT(-1).getText(); 
2023-08-08 10:18:48:329 action-translator LogManager.java:25 translate  _exprContent += "("; 
2023-08-08 10:18:48:329 action-translator LogManager.java:25 translate  _exprContent += ")"; 
2023-08-08 10:18:48:329 action-translator LogManager.java:25 translate  _exprContent += _input.LT(-1).getText(); 
2023-08-08 10:18:48:330 action-translator LogManager.java:25 translate 
					verificaID(_input.LT(-1).getText());
					_exprContent += _input.LT(-1).getText();
					verificaInit(_input.LT(-1).getText());
					IsiVariable var = (IsiVariable)symbolTable.get(_input.LT(-1).getText());
					if (var.getValue() == "READY") var.setValue("SET");
				
2023-08-08 10:18:48:330 action-translator LogManager.java:25 translate  _exprContent += _input.LT(-1).getText(); 
2023-08-08 10:18:48:376 action-translator LogManager.java:25 translate 
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2023-08-08 10:18:48:376 action-translator LogManager.java:25 translate 
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;

2023-08-08 10:18:48:376 action-translator LogManager.java:25 translate 
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;

2023-08-08 10:18:48:380 action-translator LogManager.java:25 translate 
	private int _tipo;
	private int _tipoLoop;
	private String _varName;
	private String _varValue;
	private IsiSymbolTable symbolTable = new IsiSymbolTable();
	private IsiSymbol symbol;
	private IsiProgram program = new IsiProgram();
	private ArrayList<AbstractCommand> curThread;
	private Stack<ArrayList<AbstractCommand>> stack = new Stack<ArrayList<AbstractCommand>>();
	
	private String _readID;
	private String _writeID;
	private String _exprID;
	private String _exprContent;
	private String _exprDecision;
	private ArrayList<AbstractCommand> listaTrue;
	private ArrayList<AbstractCommand> listaFalse;
	private ArrayList<AbstractCommand> listaLoop;
	
	public void verificaID(String id){
		if (!symbolTable.exists(id)){
			throw new IsiSemanticException("Symbol "+id+" not declared");
		}
	}
	
	public void verificaInit(String id){
		IsiVariable var = (IsiVariable)symbolTable.get(id);
		if (var.getValue() == null){
			throw new IsiSemanticException("Symbol "+id+" used with no initial value");
		}
	}
	
	public void verificaUso(){
		ArrayList<String> goTime = symbolTable.getAllKeys();
		for (String i : goTime){
			IsiVariable var = (IsiVariable)symbolTable.get(i);
			if (var.getValue() == null){
				throw new IsiSemanticException("Symbol "+i+" declared but not used.");
			}
		}
	}
	
	public void exibeComandos(){
		for (AbstractCommand c: program.getComandos()){
			System.out.println(c);
		}
	}
	
	public void generateCode(){
		program.generateTarget();
	}

2023-08-08 10:18:48:381 action-translator LogManager.java:25 translate 
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;

2023-08-08 10:18:48:382 action-translator LogManager.java:25 translate 
	import dataStructures.IsiSymbol;
	import dataStructures.IsiVariable;
	import dataStructures.IsiSymbolTable;
	import exceptions.IsiSemanticException;
	import ast.IsiProgram;
	import ast.AbstractCommand;
	import ast.CommandLeitura;
	import ast.CommandEscrita;
	import ast.CommandAttr;
	import ast.CommandDecisao;
	import ast.CommandLoop;
	import java.util.ArrayList;
	import java.util.Stack;

